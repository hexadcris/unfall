/* tslint:disable */
/* eslint-disable */
/**
 * opGUI - OpenAPI 3.0
 * Dummy description about the available endpoints Some useful links: - [The opGUI repository](https://gitlab.eclipse.org/eclipse/openpass/opgui) - [The documentation page](https://www.eclipse.org/openpass/content/html/index.html)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Input } from './Input';
import {
    InputFromJSON,
    InputFromJSONTyped,
    InputToJSON,
} from './Input';
import type { Output } from './Output';
import {
    OutputFromJSON,
    OutputFromJSONTyped,
    OutputToJSON,
} from './Output';
import type { Parameter } from './Parameter';
import {
    ParameterFromJSON,
    ParameterFromJSONTyped,
    ParameterToJSON,
} from './Parameter';
import type { Position } from './Position';
import {
    PositionFromJSON,
    PositionFromJSONTyped,
    PositionToJSON,
} from './Position';
import type { Schedule } from './Schedule';
import {
    ScheduleFromJSON,
    ScheduleFromJSONTyped,
    ScheduleToJSON,
} from './Schedule';

/**
 * 
 * @export
 * @interface ComponentUI
 */
export interface ComponentUI {
    /**
     * 
     * @type {number}
     * @memberof ComponentUI
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ComponentUI
     */
    type: ComponentUITypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ComponentUI
     */
    library: string;
    /**
     * 
     * @type {string}
     * @memberof ComponentUI
     */
    title: string;
    /**
     * 
     * @type {Schedule}
     * @memberof ComponentUI
     */
    schedule: Schedule;
    /**
     * 
     * @type {Array<Parameter>}
     * @memberof ComponentUI
     */
    parameters?: Array<Parameter>;
    /**
     * 
     * @type {Array<Input>}
     * @memberof ComponentUI
     */
    inputs?: Array<Input>;
    /**
     * 
     * @type {Array<Output>}
     * @memberof ComponentUI
     */
    outputs?: Array<Output>;
    /**
     * 
     * @type {Position}
     * @memberof ComponentUI
     */
    position?: Position;
}


/**
 * @export
 */
export const ComponentUITypeEnum = {
    Sensor: 'Sensor',
    Action: 'Action',
    Algorithm: 'Algorithm'
} as const;
export type ComponentUITypeEnum = typeof ComponentUITypeEnum[keyof typeof ComponentUITypeEnum];


/**
 * Check if a given object implements the ComponentUI interface.
 */
export function instanceOfComponentUI(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "library" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "schedule" in value;

    return isInstance;
}

export function ComponentUIFromJSON(json: any): ComponentUI {
    return ComponentUIFromJSONTyped(json, false);
}

export function ComponentUIFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComponentUI {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'library': json['library'],
        'title': json['title'],
        'schedule': ScheduleFromJSON(json['schedule']),
        'parameters': !exists(json, 'parameters') ? undefined : ((json['parameters'] as Array<any>).map(ParameterFromJSON)),
        'inputs': !exists(json, 'inputs') ? undefined : ((json['inputs'] as Array<any>).map(InputFromJSON)),
        'outputs': !exists(json, 'outputs') ? undefined : ((json['outputs'] as Array<any>).map(OutputFromJSON)),
        'position': !exists(json, 'position') ? undefined : PositionFromJSON(json['position']),
    };
}

export function ComponentUIToJSON(value?: ComponentUI | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'library': value.library,
        'title': value.title,
        'schedule': ScheduleToJSON(value.schedule),
        'parameters': value.parameters === undefined ? undefined : ((value.parameters as Array<any>).map(ParameterToJSON)),
        'inputs': value.inputs === undefined ? undefined : ((value.inputs as Array<any>).map(InputToJSON)),
        'outputs': value.outputs === undefined ? undefined : ((value.outputs as Array<any>).map(OutputToJSON)),
        'position': PositionToJSON(value.position),
    };
}

