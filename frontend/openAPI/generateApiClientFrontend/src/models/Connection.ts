/* tslint:disable */
/* eslint-disable */
/**
 * opGUI - OpenAPI 3.0
 * Dummy description about the available endpoints Some useful links: - [The opGUI repository](https://gitlab.eclipse.org/eclipse/openpass/opgui) - [The documentation page](https://www.eclipse.org/openpass/content/html/index.html)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Source } from './Source';
import {
    SourceFromJSON,
    SourceFromJSONTyped,
    SourceToJSON,
} from './Source';
import type { Target } from './Target';
import {
    TargetFromJSON,
    TargetFromJSONTyped,
    TargetToJSON,
} from './Target';

/**
 * 
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     * The unique identifier of the connection
     * @type {number}
     * @memberof Connection
     */
    id: number;
    /**
     * 
     * @type {Source}
     * @memberof Connection
     */
    source: Source;
    /**
     * 
     * @type {Target}
     * @memberof Connection
     */
    target: Target;
}

/**
 * Check if a given object implements the Connection interface.
 */
export function instanceOfConnection(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "target" in value;

    return isInstance;
}

export function ConnectionFromJSON(json: any): Connection {
    return ConnectionFromJSONTyped(json, false);
}

export function ConnectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Connection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'source': SourceFromJSON(json['source']),
        'target': TargetFromJSON(json['target']),
    };
}

export function ConnectionToJSON(value?: Connection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'source': SourceToJSON(value.source),
        'target': TargetToJSON(value.target),
    };
}

