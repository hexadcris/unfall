/* tslint:disable */
/* eslint-disable */
/**
 * opGUI - OpenAPI 3.0
 * Dummy description about the available endpoints Some useful links: - [The opGUI repository](https://gitlab.eclipse.org/eclipse/openpass/opgui) - [The documentation page](https://www.eclipse.org/openpass/content/html/index.html)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SimulationConfig } from './SimulationConfig';
import {
    SimulationConfigFromJSON,
    SimulationConfigFromJSONTyped,
    SimulationConfigToJSON,
} from './SimulationConfig';

/**
 * 
 * @export
 * @interface OpSimulationManagerXmlRequest
 */
export interface OpSimulationManagerXmlRequest {
    /**
     * 
     * @type {number}
     * @memberof OpSimulationManagerXmlRequest
     */
    logLevel: OpSimulationManagerXmlRequestLogLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof OpSimulationManagerXmlRequest
     */
    logFileSimulationManager: string;
    /**
     * 
     * @type {string}
     * @memberof OpSimulationManagerXmlRequest
     */
    simulation: string;
    /**
     * 
     * @type {string}
     * @memberof OpSimulationManagerXmlRequest
     */
    libraries: string;
    /**
     * 
     * @type {Array<SimulationConfig>}
     * @memberof OpSimulationManagerXmlRequest
     */
    simulationConfigs?: Array<SimulationConfig>;
}


/**
 * @export
 */
export const OpSimulationManagerXmlRequestLogLevelEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type OpSimulationManagerXmlRequestLogLevelEnum = typeof OpSimulationManagerXmlRequestLogLevelEnum[keyof typeof OpSimulationManagerXmlRequestLogLevelEnum];


/**
 * Check if a given object implements the OpSimulationManagerXmlRequest interface.
 */
export function instanceOfOpSimulationManagerXmlRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "logLevel" in value;
    isInstance = isInstance && "logFileSimulationManager" in value;
    isInstance = isInstance && "simulation" in value;
    isInstance = isInstance && "libraries" in value;

    return isInstance;
}

export function OpSimulationManagerXmlRequestFromJSON(json: any): OpSimulationManagerXmlRequest {
    return OpSimulationManagerXmlRequestFromJSONTyped(json, false);
}

export function OpSimulationManagerXmlRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpSimulationManagerXmlRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'logLevel': json['logLevel'],
        'logFileSimulationManager': json['logFileSimulationManager'],
        'simulation': json['simulation'],
        'libraries': json['libraries'],
        'simulationConfigs': !exists(json, 'simulationConfigs') ? undefined : ((json['simulationConfigs'] as Array<any>).map(SimulationConfigFromJSON)),
    };
}

export function OpSimulationManagerXmlRequestToJSON(value?: OpSimulationManagerXmlRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'logLevel': value.logLevel,
        'logFileSimulationManager': value.logFileSimulationManager,
        'simulation': value.simulation,
        'libraries': value.libraries,
        'simulationConfigs': value.simulationConfigs === undefined ? undefined : ((value.simulationConfigs as Array<any>).map(SimulationConfigToJSON)),
    };
}

