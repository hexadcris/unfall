/* tslint:disable */
/* eslint-disable */
/**
 * opGUI - OpenAPI 3.0
 * Dummy description about the available endpoints Some useful links: - [The opGUI repository](https://gitlab.eclipse.org/eclipse/openpass/opgui) - [The documentation page](https://www.eclipse.org/openpass/content/html/index.html)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ComponentUI } from './ComponentUI';
import {
    ComponentUIFromJSON,
    ComponentUIFromJSONTyped,
    ComponentUIToJSON,
} from './ComponentUI';
import type { Connection } from './Connection';
import {
    ConnectionFromJSON,
    ConnectionFromJSONTyped,
    ConnectionToJSON,
} from './Connection';

/**
 * 
 * @export
 * @interface SystemUI
 */
export interface SystemUI {
    /**
     * 
     * @type {number}
     * @memberof SystemUI
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof SystemUI
     */
    title: string;
    /**
     * 
     * @type {number}
     * @memberof SystemUI
     */
    priority: number;
    /**
     * 
     * @type {Array<ComponentUI>}
     * @memberof SystemUI
     */
    components: Array<ComponentUI>;
    /**
     * 
     * @type {Array<Connection>}
     * @memberof SystemUI
     */
    connections?: Array<Connection>;
    /**
     * 
     * @type {string}
     * @memberof SystemUI
     */
    file?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SystemUI
     */
    deleted?: boolean;
}

/**
 * Check if a given object implements the SystemUI interface.
 */
export function instanceOfSystemUI(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "priority" in value;
    isInstance = isInstance && "components" in value;

    return isInstance;
}

export function SystemUIFromJSON(json: any): SystemUI {
    return SystemUIFromJSONTyped(json, false);
}

export function SystemUIFromJSONTyped(json: any, ignoreDiscriminator: boolean): SystemUI {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'priority': json['priority'],
        'components': ((json['components'] as Array<any>).map(ComponentUIFromJSON)),
        'connections': !exists(json, 'connections') ? undefined : ((json['connections'] as Array<any>).map(ConnectionFromJSON)),
        'file': !exists(json, 'file') ? undefined : json['file'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
    };
}

export function SystemUIToJSON(value?: SystemUI | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'priority': value.priority,
        'components': ((value.components as Array<any>).map(ComponentUIToJSON)),
        'connections': value.connections === undefined ? undefined : ((value.connections as Array<any>).map(ConnectionToJSON)),
        'file': value.file,
        'deleted': value.deleted,
    };
}

