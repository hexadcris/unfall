/* tslint:disable */
/* eslint-disable */
/**
 * opGUI - OpenAPI 3.0
 * Dummy description about the available endpoints Some useful links: - [The opGUI repository](https://gitlab.eclipse.org/eclipse/openpass/opgui) - [The documentation page](https://www.eclipse.org/openpass/content/html/index.html)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfigsRequest,
  Default200Response,
  Error400,
  Error500,
} from '../models';
import {
    ConfigsRequestFromJSON,
    ConfigsRequestToJSON,
    Default200ResponseFromJSON,
    Default200ResponseToJSON,
    Error400FromJSON,
    Error400ToJSON,
    Error500FromJSON,
    Error500ToJSON,
} from '../models';

export interface ApiConvertToConfigsPostRequest {
    configsRequest: ConfigsRequest;
}

/**
 * 
 */
export class ConvertToConfigsApi extends runtime.BaseAPI {

    /**
     * send the IDs to convert into EXAMPLEID/configs for each selected experiment and also send the system paths that will be used
     * convert the selected PCM cases into configuration folders
     */
    async apiConvertToConfigsPostRaw(requestParameters: ApiConvertToConfigsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Default200Response>> {
        if (requestParameters.configsRequest === null || requestParameters.configsRequest === undefined) {
            throw new runtime.RequiredError('configsRequest','Required parameter requestParameters.configsRequest was null or undefined when calling apiConvertToConfigsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/convertToConfigs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigsRequestToJSON(requestParameters.configsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Default200ResponseFromJSON(jsonValue));
    }

    /**
     * send the IDs to convert into EXAMPLEID/configs for each selected experiment and also send the system paths that will be used
     * convert the selected PCM cases into configuration folders
     */
    async apiConvertToConfigsPost(requestParameters: ApiConvertToConfigsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Default200Response> {
        const response = await this.apiConvertToConfigsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
